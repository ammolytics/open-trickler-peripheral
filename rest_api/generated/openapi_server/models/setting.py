# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
import re
from openapi_server import util

import re  # noqa: E501

class Setting(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, auto_mode=None, target_weight=None, target_unit=None):  # noqa: E501
        """Setting - a model defined in OpenAPI

        :param auto_mode: The auto_mode of this Setting.  # noqa: E501
        :type auto_mode: bool
        :param target_weight: The target_weight of this Setting.  # noqa: E501
        :type target_weight: str
        :param target_unit: The target_unit of this Setting.  # noqa: E501
        :type target_unit: str
        """
        self.openapi_types = {
            'auto_mode': bool,
            'target_weight': str,
            'target_unit': str
        }

        self.attribute_map = {
            'auto_mode': 'auto_mode',
            'target_weight': 'target_weight',
            'target_unit': 'target_unit'
        }

        self._auto_mode = auto_mode
        self._target_weight = target_weight
        self._target_unit = target_unit

    @classmethod
    def from_dict(cls, dikt) -> 'Setting':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Setting of this Setting.  # noqa: E501
        :rtype: Setting
        """
        return util.deserialize_model(dikt, cls)

    @property
    def auto_mode(self):
        """Gets the auto_mode of this Setting.


        :return: The auto_mode of this Setting.
        :rtype: bool
        """
        return self._auto_mode

    @auto_mode.setter
    def auto_mode(self, auto_mode):
        """Sets the auto_mode of this Setting.


        :param auto_mode: The auto_mode of this Setting.
        :type auto_mode: bool
        """

        self._auto_mode = auto_mode

    @property
    def target_weight(self):
        """Gets the target_weight of this Setting.


        :return: The target_weight of this Setting.
        :rtype: str
        """
        return self._target_weight

    @target_weight.setter
    def target_weight(self, target_weight):
        """Sets the target_weight of this Setting.


        :param target_weight: The target_weight of this Setting.
        :type target_weight: str
        """
        if target_weight is not None and not re.search(r'^\d{1,3}.\d{1,3}$', target_weight):  # noqa: E501
            raise ValueError("Invalid value for `target_weight`, must be a follow pattern or equal to `/^\d{1,3}.\d{1,3}$/`")  # noqa: E501

        self._target_weight = target_weight

    @property
    def target_unit(self):
        """Gets the target_unit of this Setting.


        :return: The target_unit of this Setting.
        :rtype: str
        """
        return self._target_unit

    @target_unit.setter
    def target_unit(self, target_unit):
        """Sets the target_unit of this Setting.


        :param target_unit: The target_unit of this Setting.
        :type target_unit: str
        """
        allowed_values = ["g", "gn"]  # noqa: E501
        if target_unit not in allowed_values:
            raise ValueError(
                "Invalid value for `target_unit` ({0}), must be one of {1}"
                .format(target_unit, allowed_values)
            )

        self._target_unit = target_unit
