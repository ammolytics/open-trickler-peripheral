/**
 * Open Trickler REST API
 * A REST API for the Open Trickler that powers a web-based interface and mobile apps (in the future).
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Setting model module.
 * @module model/Setting
 * @version 1.0.0
 */
class Setting {
    /**
     * Constructs a new <code>Setting</code>.
     * @alias module:model/Setting
     */
    constructor() { 
        
        Setting.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Setting</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Setting} obj Optional instance to populate.
     * @return {module:model/Setting} The populated <code>Setting</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Setting();

            if (data.hasOwnProperty('auto_mode')) {
                obj['auto_mode'] = ApiClient.convertToType(data['auto_mode'], 'Boolean');
            }
            if (data.hasOwnProperty('target_weight')) {
                obj['target_weight'] = ApiClient.convertToType(data['target_weight'], 'String');
            }
            if (data.hasOwnProperty('target_unit')) {
                obj['target_unit'] = ApiClient.convertToType(data['target_unit'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Setting</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Setting</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['target_weight'] && !(typeof data['target_weight'] === 'string' || data['target_weight'] instanceof String)) {
            throw new Error("Expected the field `target_weight` to be a primitive type in the JSON string but got " + data['target_weight']);
        }
        // ensure the json data is a string
        if (data['target_unit'] && !(typeof data['target_unit'] === 'string' || data['target_unit'] instanceof String)) {
            throw new Error("Expected the field `target_unit` to be a primitive type in the JSON string but got " + data['target_unit']);
        }

        return true;
    }


}



/**
 * @member {Boolean} auto_mode
 */
Setting.prototype['auto_mode'] = undefined;

/**
 * @member {String} target_weight
 */
Setting.prototype['target_weight'] = undefined;

/**
 * @member {module:model/Setting.TargetUnitEnum} target_unit
 */
Setting.prototype['target_unit'] = undefined;





/**
 * Allowed values for the <code>target_unit</code> property.
 * @enum {String}
 * @readonly
 */
Setting['TargetUnitEnum'] = {

    /**
     * value: "g"
     * @const
     */
    "g": "g",

    /**
     * value: "gn"
     * @const
     */
    "gn": "gn"
};



export default Setting;

